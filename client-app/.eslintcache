[{"C:\\xampp\\htdocs\\symfony_api\\client-app\\src\\index.js":"1","C:\\xampp\\htdocs\\symfony_api\\client-app\\src\\App.js":"2","C:\\xampp\\htdocs\\symfony_api\\client-app\\src\\reportWebVitals.js":"3","C:\\xampp\\htdocs\\symfony_api\\client-app\\src\\config\\axios.js":"4","C:\\xampp\\htdocs\\symfony_api\\client-app\\src\\components\\Home.jsx":"5","C:\\xampp\\htdocs\\symfony_api\\client-app\\src\\components\\Navbar.jsx":"6","C:\\xampp\\htdocs\\symfony_api\\client-app\\src\\components\\CarrouselProducts.jsx":"7","C:\\xampp\\htdocs\\symfony_api\\client-app\\src\\components\\crud\\categories\\categories.jsx":"8","C:\\xampp\\htdocs\\symfony_api\\client-app\\src\\components\\crud\\categories\\Categories.jsx":"9","C:\\xampp\\htdocs\\symfony_api\\client-app\\src\\components\\crud\\products\\Products.jsx":"10","C:\\xampp\\htdocs\\symfony_api\\client-app\\src\\components\\crud\\products\\UpdateProduct.jsx":"11","C:\\xampp\\htdocs\\symfony_api\\client-app\\src\\components\\crud\\categories\\UpdateCategory.jsx":"12","C:\\xampp\\htdocs\\symfony_api\\client-app\\src\\components\\crud\\categories\\AddCategory.jsx":"13","C:\\xampp\\htdocs\\symfony_api\\client-app\\src\\components\\crud\\products\\AddProduct.jsx":"14","C:\\xampp\\htdocs\\symfony_api\\client-app\\src\\components\\crud\\customers\\Customers.jsx":"15","C:\\xampp\\htdocs\\symfony_api\\client-app\\src\\components\\crud\\customers\\AddCustomer.jsx":"16","C:\\xampp\\htdocs\\symfony_api\\client-app\\src\\components\\navbar\\Navbar.jsx":"17","C:\\xampp\\htdocs\\symfony_api\\client-app\\src\\components\\navbar\\toolbar\\Toolbar.jsx":"18","C:\\xampp\\htdocs\\symfony_api\\client-app\\src\\components\\navbar\\drawer\\Drawer.jsx":"19"},{"size":500,"mtime":499162500000,"results":"20","hashOfConfig":"21"},{"size":1766,"mtime":1608400879318,"results":"22","hashOfConfig":"21"},{"size":362,"mtime":499162500000,"results":"23","hashOfConfig":"21"},{"size":118,"mtime":1608141021395,"results":"24","hashOfConfig":"21"},{"size":3185,"mtime":1608147881542,"results":"25","hashOfConfig":"21"},{"size":4335,"mtime":1608315925225,"results":"26","hashOfConfig":"21"},{"size":1168,"mtime":1608147010264,"results":"27","hashOfConfig":"21"},{"size":4032,"mtime":1608149690164,"results":"28","hashOfConfig":"21"},{"size":5472,"mtime":1608227804462,"results":"29","hashOfConfig":"21"},{"size":6187,"mtime":1608227992943,"results":"30","hashOfConfig":"21"},{"size":197,"mtime":1608215464240,"results":"31","hashOfConfig":"21"},{"size":2958,"mtime":1608228109645,"results":"32","hashOfConfig":"21"},{"size":2331,"mtime":1608227202178,"results":"33","hashOfConfig":"21"},{"size":5446,"mtime":1608310837241,"results":"34","hashOfConfig":"21"},{"size":6189,"mtime":1608311625627,"results":"35","hashOfConfig":"21"},{"size":3426,"mtime":1608315305965,"results":"36","hashOfConfig":"21"},{"size":760,"mtime":1608400824613,"results":"37","hashOfConfig":"21"},{"size":9260,"mtime":1608401102347,"results":"38","hashOfConfig":"21"},{"size":2168,"mtime":1608400706873,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"1z03k5l",{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"42"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"42"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"42"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"42"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"42"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"42"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"42"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"82","messages":"83","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\xampp\\htdocs\\symfony_api\\client-app\\src\\index.js",[],["86","87"],"C:\\xampp\\htdocs\\symfony_api\\client-app\\src\\App.js",[],"C:\\xampp\\htdocs\\symfony_api\\client-app\\src\\reportWebVitals.js",[],"C:\\xampp\\htdocs\\symfony_api\\client-app\\src\\config\\axios.js",[],"C:\\xampp\\htdocs\\symfony_api\\client-app\\src\\components\\Home.jsx",[],"C:\\xampp\\htdocs\\symfony_api\\client-app\\src\\components\\Navbar.jsx",[],"C:\\xampp\\htdocs\\symfony_api\\client-app\\src\\components\\CarrouselProducts.jsx",[],"C:\\xampp\\htdocs\\symfony_api\\client-app\\src\\components\\crud\\categories\\categories.jsx",["88"],"C:\\xampp\\htdocs\\symfony_api\\client-app\\src\\components\\crud\\categories\\Categories.jsx",["89"],"import React, { useState, useEffect } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Link } from 'react-router-dom';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Button from '@material-ui/core/Button';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport { apiAxios } from \"../../../config/axios\";\r\n\r\n\r\nexport const Categories = () => {\r\n\r\n    const [page, setPage] = React.useState(0);\r\n    const [rowsPerPage, setRowsPerPage] = React.useState(10);\r\n    const [categories, setCategories] = useState([]);\r\n\r\n    useEffect(() => {\r\n        getCategories();\r\n    }, []);\r\n\r\n    const handleChangePage = (event, newPage) => {\r\n        setPage(newPage);\r\n    };\r\n\r\n    const handleChangeRowsPerPage = (event) => {\r\n        setRowsPerPage(+event.target.value);\r\n        setPage(0);\r\n    };\r\n\r\n    const getCategories = () => {\r\n\r\n        apiAxios\r\n            .get(\"/categories\")\r\n            .then(({ data }) => {\r\n                setCategories(data);\r\n            })\r\n            .catch((error) => console.log(error));\r\n\r\n    };\r\n\r\n    const deleteCategory = (id) => {\r\n\r\n        apiAxios\r\n            .delete(\"/categories/\" + id)\r\n            .then(({ data }) => {\r\n                console.log(data);\r\n                getCategories();\r\n            })\r\n            .catch((error) => console.log(error));\r\n    }\r\n\r\n    const useStyles = makeStyles({\r\n        root: {\r\n            width: '100%',\r\n        },\r\n        container: {\r\n            padding: 30,\r\n        },\r\n        button: {\r\n            margin: 2,\r\n        }\r\n    });\r\n\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <Grid container className={classes.container} container\r\n            direction=\"row\"\r\n            justify=\"center\"\r\n            alignItems=\"center\">\r\n            {\r\n                categories.length > 0 ?\r\n                    <Paper className={classes.root}>\r\n                        <TableContainer >\r\n                            <Table stickyHeader aria-label=\"sticky table\">\r\n                                <TableHead>\r\n                                    <TableRow>\r\n                                        <TableCell>\r\n                                            ID\r\n                                        </TableCell>\r\n                                        <TableCell>\r\n                                            Name\r\n                                        </TableCell>\r\n                                        <TableCell>\r\n                                            Actions\r\n                                        </TableCell>\r\n                                    </TableRow>\r\n                                </TableHead>\r\n                                <TableBody>\r\n                                    {categories.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((c) => {\r\n                                        return (\r\n                                            <TableRow hover role=\"checkbox\" tabIndex={-1} key={c.id}>\r\n                                                <TableCell component=\"th\" scope=\"row\">\r\n                                                    {c.id}\r\n                                                </TableCell>\r\n                                                <TableCell >{c.name}</TableCell>\r\n                                                <TableCell >\r\n                                                    <Link to={`/categories/update/${c.id}`}>\r\n                                                        <Button variant=\"contained\" color=\"primary\" className={classes.button}>\r\n                                                            Update\r\n                                                            </Button>\r\n                                                    </Link>\r\n                                                    <Button variant=\"contained\" color=\"secondary\" onClick={() => deleteCategory(c.id)} className={classes.button}>\r\n                                                        Delete\r\n                                                    </Button>\r\n                                                </TableCell>\r\n                                            </TableRow>\r\n                                        );\r\n                                    })}\r\n                                </TableBody>\r\n                            </Table>\r\n                        </TableContainer>\r\n\r\n                        <TablePagination\r\n                            rowsPerPageOptions={[10, 25, 100]}\r\n                            component=\"div\"\r\n                            count={categories.length}\r\n                            rowsPerPage={rowsPerPage}\r\n                            page={page}\r\n                            onChangePage={handleChangePage}\r\n                            onChangeRowsPerPage={handleChangeRowsPerPage}\r\n                        />\r\n\r\n                    </Paper>\r\n                    :\r\n                    <CircularProgress color=\"secondary\" />\r\n            }\r\n\r\n        </Grid>\r\n    );\r\n}\r\n","C:\\xampp\\htdocs\\symfony_api\\client-app\\src\\components\\crud\\products\\Products.jsx",["90"],"import React, { useState, useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Button from '@material-ui/core/Button';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport { apiAxios } from \"../../../config/axios\";\r\n\r\nexport const Products = () => {\r\n\r\n    const [page, setPage] = React.useState(0);\r\n    const [rowsPerPage, setRowsPerPage] = React.useState(10);\r\n    const [products, setProducts] = useState([]);\r\n\r\n    useEffect(() => {\r\n        getProducts();\r\n    }, []);\r\n\r\n    const handleChangePage = (event, newPage) => {\r\n        setPage(newPage);\r\n    };\r\n\r\n    const handleChangeRowsPerPage = (event) => {\r\n        setRowsPerPage(+event.target.value);\r\n        setPage(0);\r\n    };\r\n\r\n    const getProducts = () => {\r\n\r\n        apiAxios\r\n            .get(\"/products\")\r\n            .then(({ data }) => {\r\n                setProducts(data);\r\n            })\r\n            .catch((error) => console.log(error));\r\n\r\n    };\r\n\r\n    const deleteProduct = (id) => {\r\n\r\n        apiAxios\r\n            .delete(\"/products/\" + id)\r\n            .then(({ data }) => {\r\n                console.log(data);\r\n                getProducts();\r\n            })\r\n            .catch((error) => console.log(error));\r\n    }\r\n\r\n    const useStyles = makeStyles({\r\n        root: {\r\n            width: '100%',\r\n        },\r\n        container: {\r\n            padding: 30,\r\n        },\r\n        button: {\r\n            margin: 2,\r\n        }\r\n    });\r\n\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <Grid container className={classes.container} container\r\n            direction=\"row\"\r\n            justify=\"center\"\r\n            alignItems=\"center\">\r\n            {\r\n                products.length > 0 ?\r\n\r\n                    <Paper className={classes.root}>\r\n                        <TableContainer >\r\n                            <Table stickyHeader aria-label=\"sticky table\">\r\n                                <TableHead>\r\n                                    <TableRow>\r\n                                        <TableCell>\r\n                                            ID\r\n                                        </TableCell>\r\n                                        <TableCell>\r\n                                            Title\r\n                                        </TableCell>\r\n                                        <TableCell>\r\n                                            Descripcion\r\n                                        </TableCell>\r\n                                        <TableCell>\r\n                                            Category\r\n                                        </TableCell>\r\n                                        <TableCell>\r\n                                            Price\r\n                                        </TableCell>\r\n                                        <TableCell>\r\n                                            Actions\r\n                                        </TableCell>\r\n                                    </TableRow>\r\n                                </TableHead>\r\n                                <TableBody>\r\n                                    {products.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((p) => {\r\n                                        return (\r\n                                            <TableRow hover role=\"checkbox\" tabIndex={-1} key={p.id}>\r\n                                                <TableCell component=\"th\" scope=\"row\">\r\n                                                    {p.id}\r\n                                                </TableCell>\r\n                                                <TableCell >{p.title}</TableCell>\r\n                                                <TableCell >{p.description}</TableCell>\r\n                                                <TableCell >{p.category.name}</TableCell>\r\n                                                <TableCell >${p.price}</TableCell>\r\n                                                <TableCell >\r\n                                                    <Link to={`/products/update/${p.id}`}>\r\n                                                        <Button variant=\"contained\" color=\"primary\" className={classes.button}>\r\n                                                            Update\r\n                                                        </Button>\r\n                                                    </Link>\r\n                                                    <Button variant=\"contained\" color=\"secondary\" onClick={() => deleteProduct(p.id)} className={classes.button}>\r\n                                                        Delete\r\n                                                    </Button>\r\n                                                </TableCell>\r\n                                            </TableRow>\r\n                                        );\r\n                                    })}\r\n                                </TableBody>\r\n                            </Table>\r\n                        </TableContainer>\r\n\r\n                        <TablePagination\r\n                            rowsPerPageOptions={[10, 25, 100]}\r\n                            component=\"div\"\r\n                            count={products.length}\r\n                            rowsPerPage={rowsPerPage}\r\n                            page={page}\r\n                            onChangePage={handleChangePage}\r\n                            onChangeRowsPerPage={handleChangeRowsPerPage}\r\n                        />\r\n\r\n                    </Paper>\r\n                    :\r\n                    <CircularProgress color=\"secondary\" />\r\n            }\r\n        </Grid>\r\n    );\r\n}\r\n","C:\\xampp\\htdocs\\symfony_api\\client-app\\src\\components\\crud\\products\\UpdateProduct.jsx",[],"C:\\xampp\\htdocs\\symfony_api\\client-app\\src\\components\\crud\\categories\\UpdateCategory.jsx",["91","92"],"import React, { useState, useEffect } from 'react';\r\nimport { useParams } from \"react-router-dom\";\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Button from '@material-ui/core/Button';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport Box from '@material-ui/core/Box';\r\nimport { apiAxios } from \"../../../config/axios\";\r\n\r\nexport const UpdateCategory = () => {\r\n\r\n    const [category, setCategory] = useState({});\r\n\r\n    useEffect(() => {\r\n        getCategory();\r\n    }, []);\r\n\r\n    const { id } = useParams();\r\n\r\n    const getCategory = () => {\r\n\r\n        apiAxios\r\n            .get(\"/categories/\" + id)\r\n            .then(({ data }) => {\r\n                setCategory(data);\r\n            })\r\n            .catch((error) => console.log(error));\r\n\r\n    }\r\n\r\n    const handleChange = async e => {\r\n        const { name, value } = e.target;\r\n\r\n        setCategory(prevState => ({\r\n            ...prevState,\r\n            [name]: value\r\n        }))\r\n\r\n    }\r\n\r\n    const handleSubmit = () => {\r\n        apiAxios\r\n            .patch(\"/categories/\" + id, category)\r\n            .then(({ data }) => {\r\n                alert(data);\r\n            })\r\n            .catch((error) => console.log(error));\r\n    }\r\n\r\n    const useStyles = makeStyles({\r\n        root: {\r\n            width: '50%',\r\n            padding: '20px',\r\n        },\r\n        container: {\r\n            padding: 30,\r\n        },\r\n        button: {\r\n            marginTop: '1rem',\r\n        },\r\n        input: {\r\n            width: '100%',\r\n        },\r\n        form: {\r\n            width: '100%',\r\n            marginTop: '1rem',\r\n        }\r\n    });\r\n\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        < Grid container className={classes.container} container\r\n            direction=\"row\"\r\n            justify=\"center\"\r\n            alignItems=\"center\" >\r\n            {\r\n                Object.entries(category).length !== 0 ? (\r\n\r\n                    <Paper className={classes.root}>\r\n                        <Box fontWeight=\"700\" fontSize={32} m={1}>\r\n                            Update Category\r\n                        </Box>\r\n\r\n                        <form className={classes.form} noValidate autoComplete=\"off\">\r\n                            <TextField id=\"outlined-basic\" label=\"Name\" variant=\"outlined\" name=\"name\" className={classes.input} value={category.name} onChange={handleChange} />\r\n                            <Button variant=\"contained\" color=\"primary\" className={classes.button} onClick={handleSubmit}>\r\n                                Update\r\n                            </Button>\r\n                        </form>\r\n\r\n                    </Paper>\r\n\r\n                )\r\n                    :\r\n                    <CircularProgress color=\"secondary\" />\r\n            }\r\n\r\n        </Grid >\r\n    )\r\n}","C:\\xampp\\htdocs\\symfony_api\\client-app\\src\\components\\crud\\categories\\AddCategory.jsx",["93"],"import React, { useState } from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Button from '@material-ui/core/Button';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Box from '@material-ui/core/Box';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { apiAxios } from \"../../../config/axios\";\r\n\r\nexport const AddCategory = () => {\r\n\r\n    const [category, setCategory] = useState({});\r\n    const history = useHistory();\r\n\r\n    const handleChange = async e => {\r\n        const { name, value } = e.target;\r\n\r\n        setCategory(prevState => ({\r\n            ...prevState,\r\n            [name]: value\r\n        }))\r\n\r\n    }\r\n\r\n    const handleSubmit = () => {\r\n        apiAxios\r\n            .post(\"/categories\", category)\r\n            .then(({ data }) => {\r\n                console.log(data);\r\n                history.push('/categories');\r\n            })\r\n            .catch((error) => console.log(error));\r\n    }\r\n\r\n    const useStyles = makeStyles({\r\n        root: {\r\n            width: '50%',\r\n            padding: '20px',\r\n        },\r\n        container: {\r\n            padding: 30,\r\n        },\r\n        button: {\r\n            marginTop: '1rem',\r\n        },\r\n        input: {\r\n            width: '100%',\r\n        },\r\n        form: {\r\n            width: '100%',\r\n            marginTop: '1rem',\r\n        }\r\n    });\r\n\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        < Grid container className={classes.container} container\r\n            direction=\"row\"\r\n            justify=\"center\"\r\n            alignItems=\"center\" >\r\n\r\n            <Paper className={classes.root}>\r\n                <Box fontWeight=\"700\" fontSize={32} m={1}>\r\n                    Add Category\r\n                </Box>\r\n\r\n                <form className={classes.form} noValidate autoComplete=\"off\">\r\n                    <TextField id=\"outlined-basic\" label=\"Name\" variant=\"outlined\" name=\"name\" className={classes.input} value={category.name} onChange={handleChange} />\r\n                    <Button variant=\"contained\" color=\"primary\" className={classes.button} onClick={handleSubmit}>\r\n                        Add\r\n                    </Button>\r\n                </form>\r\n\r\n            </Paper>\r\n\r\n        </Grid >\r\n    )\r\n}","C:\\xampp\\htdocs\\symfony_api\\client-app\\src\\components\\crud\\products\\AddProduct.jsx",["94","95","96"],"import React, { useState, useEffect } from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Button from '@material-ui/core/Button';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Box from '@material-ui/core/Box';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport Select from '@material-ui/core/Select';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport { apiAxios } from \"../../../config/axios\";\r\n\r\nexport const AddProduct = () => {\r\n\r\n    const [categories, setCategories] = useState([]);\r\n    const [product, setProduct] = useState({});\r\n    const history = useHistory();\r\n\r\n    useEffect(() => {\r\n        getCategories();\r\n    }, []);\r\n\r\n    const handleChange = async e => {\r\n        const { name, value } = e.target;\r\n\r\n        setProduct(prevState => ({\r\n            ...prevState,\r\n            [name]: value\r\n        }))\r\n\r\n    }\r\n\r\n    const getCategories = () => {\r\n\r\n        apiAxios\r\n            .get(\"/categories\")\r\n            .then(({ data }) => {\r\n                setCategories(data);\r\n            })\r\n            .catch((error) => console.log(error));\r\n\r\n    }\r\n\r\n    const handleSubmit = () => {\r\n        apiAxios\r\n            .post(\"/products\", product)\r\n            .then(({ data }) => {\r\n                console.log(data);\r\n                history.push('/products');\r\n            })\r\n            .catch((error) => console.log(error));\r\n    }\r\n\r\n    const useStyles = makeStyles({\r\n        root: {\r\n            width: '60%',\r\n            padding: '20px',\r\n        },\r\n        container: {\r\n            padding: 30,\r\n        },\r\n        input: {\r\n            width: '100%',\r\n        },\r\n        form: {\r\n            width: '100%',\r\n            marginTop: '1rem',\r\n        },\r\n    });\r\n\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <Grid container className={classes.container} container\r\n            direction=\"row\"\r\n            justify=\"center\"\r\n            alignItems=\"center\" >\r\n            {\r\n                categories.length > 0 ?\r\n                    <Paper className={classes.root}>\r\n                        <Box fontWeight=\"700\" fontSize={32} m={1}>\r\n                            Add Product\r\n                        </Box>\r\n                        <form className={classes.form} noValidate autoComplete=\"off\">\r\n                            <Grid container spacing={3} >\r\n                                <Grid item xs={12}>\r\n                                    <TextField id=\"outlined-basic\" className={classes.input} label=\"Code\" variant=\"outlined\" name=\"code\" onChange={handleChange} />\r\n                                </Grid>\r\n                                <Grid item xs={6}>\r\n                                    <TextField id=\"outlined-basic\" className={classes.input} label=\"Title\" variant=\"outlined\" name=\"title\" onChange={handleChange} />\r\n                                </Grid>\r\n                                <Grid item xs={6}>\r\n                                    <TextField id=\"outlined-basic\" className={classes.input} label=\"Description\" variant=\"outlined\" name=\"description\" onChange={handleChange} />\r\n                                </Grid>\r\n                                <Grid item xs={6}>\r\n                                    <TextField id=\"outlined-basic\" className={classes.input} label=\"Price\" variant=\"outlined\" name=\"price\" type=\"number\" onChange={handleChange} />\r\n                                </Grid>\r\n                                <Grid item xs={6}>\r\n                                    <FormControl className={classes.input}>\r\n                                        <InputLabel id=\"demo-simple-select-label\">Age</InputLabel>\r\n                                        <Select\r\n                                            labelId=\"demo-simple-select-label\"\r\n                                            id=\"demo-simple-select\"\r\n                                            name=\"category\"\r\n                                            value={1}\r\n                                            onChange={handleChange}\r\n                                        >\r\n                                            {categories.map((c) =>\r\n                                                <MenuItem value={c.id}>{c.name}</MenuItem>\r\n                                            )}\r\n                                        </Select>\r\n                                    </FormControl>\r\n                                </Grid>\r\n                                <Grid item xs={6}>\r\n                                    <Button variant=\"contained\" color=\"primary\" color=\"primary\"\r\n                                        className={classes.button}\r\n                                        startIcon={<AddIcon />} className={classes.button} onClick={handleSubmit}>\r\n                                        Add\r\n                                    </Button>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </form>\r\n                    </Paper>\r\n                    :\r\n                    <CircularProgress color=\"secondary\" />\r\n            }\r\n        </Grid >\r\n    )\r\n}","C:\\xampp\\htdocs\\symfony_api\\client-app\\src\\components\\crud\\customers\\Customers.jsx",["97"],"import React, { useState, useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Button from '@material-ui/core/Button';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport { apiAxios } from \"../../../config/axios\";\r\n\r\nexport const Customers = () => {\r\n\r\n    const [page, setPage] = React.useState(0);\r\n    const [rowsPerPage, setRowsPerPage] = React.useState(10);\r\n    const [customers, setCustomers] = useState([]);\r\n\r\n    useEffect(() => {\r\n        getCustomers();\r\n    }, []);\r\n\r\n    const handleChangePage = (event, newPage) => {\r\n        setPage(newPage);\r\n    };\r\n\r\n    const handleChangeRowsPerPage = (event) => {\r\n        setRowsPerPage(+event.target.value);\r\n        setPage(0);\r\n    };\r\n\r\n    const getCustomers = () => {\r\n\r\n        apiAxios\r\n            .get(\"/customers\")\r\n            .then(({ data }) => {\r\n                console.log(data);\r\n                setCustomers(data);\r\n            })\r\n            .catch((error) => console.log(error));\r\n\r\n    };\r\n\r\n    const deleteCustomer = (id) => {\r\n\r\n        apiAxios\r\n            .delete(\"/customers/\" + id)\r\n            .then(({ data }) => {\r\n                getCustomers();\r\n            })\r\n            .catch((error) => console.log(error));\r\n    }\r\n\r\n    const useStyles = makeStyles({\r\n        root: {\r\n            width: '100%',\r\n        },\r\n        container: {\r\n            padding: 30,\r\n        },\r\n        button: {\r\n            margin: 2,\r\n        }\r\n    });\r\n\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <Grid container className={classes.container} container\r\n            direction=\"row\"\r\n            justify=\"center\"\r\n            alignItems=\"center\">\r\n            {\r\n                customers.length > 0 ?\r\n\r\n                    <Paper className={classes.root}>\r\n                        <TableContainer >\r\n                            <Table stickyHeader aria-label=\"sticky table\">\r\n                                <TableHead>\r\n                                    <TableRow>\r\n                                        <TableCell>\r\n                                            ID\r\n                                        </TableCell>\r\n                                        <TableCell>\r\n                                            Name\r\n                                        </TableCell>\r\n                                        <TableCell>\r\n                                            Last Name\r\n                                        </TableCell>\r\n                                        <TableCell>\r\n                                            E-mail\r\n                                        </TableCell>\r\n                                        <TableCell>\r\n                                            Phone\r\n                                        </TableCell>\r\n                                        <TableCell>\r\n                                            Actions\r\n                                        </TableCell>\r\n                                    </TableRow>\r\n                                </TableHead>\r\n                                <TableBody>\r\n                                    {customers.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((p) => {\r\n                                        return (\r\n                                            <TableRow hover role=\"checkbox\" tabIndex={-1} key={p.id}>\r\n                                                <TableCell component=\"th\" scope=\"row\">\r\n                                                    {p.id}\r\n                                                </TableCell>\r\n                                                <TableCell >{p.name}</TableCell>\r\n                                                <TableCell >{p.lastName}</TableCell>\r\n                                                <TableCell >{p.email}</TableCell>\r\n                                                <TableCell >{p.phoneNumber}</TableCell>\r\n                                                <TableCell >\r\n                                                    <Link to={`/products/update/${p.id}`}>\r\n                                                        <Button variant=\"contained\" color=\"primary\" className={classes.button}>\r\n                                                            Update\r\n                                                        </Button>\r\n                                                    </Link>\r\n                                                    <Button variant=\"contained\" color=\"secondary\" onClick={() => deleteCustomer(p.id)} className={classes.button}>\r\n                                                        Delete\r\n                                                    </Button>\r\n                                                </TableCell>\r\n                                            </TableRow>\r\n                                        );\r\n                                    })}\r\n                                </TableBody>\r\n                            </Table>\r\n                        </TableContainer>\r\n\r\n                        <TablePagination\r\n                            rowsPerPageOptions={[10, 25, 100]}\r\n                            component=\"div\"\r\n                            count={customers.length}\r\n                            rowsPerPage={rowsPerPage}\r\n                            page={page}\r\n                            onChangePage={handleChangePage}\r\n                            onChangeRowsPerPage={handleChangeRowsPerPage}\r\n                        />\r\n\r\n                    </Paper>\r\n                    :\r\n                    <CircularProgress color=\"secondary\" />\r\n            }\r\n        </Grid>\r\n    );\r\n}\r\n","C:\\xampp\\htdocs\\symfony_api\\client-app\\src\\components\\crud\\customers\\AddCustomer.jsx",["98","99","100","101"],"import React, { useState, useEffect } from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Button from '@material-ui/core/Button';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Box from '@material-ui/core/Box';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport { apiAxios } from \"../../../config/axios\";\r\n\r\nexport const AddCustomer = () => {\r\n\r\n    const [customer, setCustomer] = useState({});\r\n    const history = useHistory();\r\n\r\n    const handleChange = async e => {\r\n        const { name, value } = e.target;\r\n\r\n        setCustomer(prevState => ({\r\n            ...prevState,\r\n            [name]: value\r\n        }))\r\n\r\n    }\r\n\r\n    const handleSubmit = () => {\r\n        apiAxios\r\n            .post(\"/customers\", customer)\r\n            .then(({ data }) => {\r\n                console.log(data);\r\n                history.push('/customers');\r\n            })\r\n            .catch((error) => console.log(error));\r\n    }\r\n\r\n    const useStyles = makeStyles({\r\n        root: {\r\n            padding: '20px',\r\n        },\r\n        container: {\r\n            padding: 30,\r\n        },\r\n        input: {\r\n            width: '100%',\r\n        },\r\n        form: {\r\n            width: '100%',\r\n            marginTop: '1rem',\r\n        },\r\n    });\r\n\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <Grid container className={classes.container} container\r\n            direction=\"row\"\r\n            justify=\"center\"\r\n            alignItems=\"center\" >\r\n            <Paper className={classes.root}>\r\n                <Box fontWeight=\"700\" fontSize={32} m={1}>\r\n                    Add Customer\r\n                        </Box>\r\n                <form noValidate autoComplete=\"off\">\r\n                    <Grid container spacing={3} >\r\n                        <Grid item xs={6}>\r\n                            <TextField id=\"outlined-basic\" className={classes.input} label=\"Name\" variant=\"outlined\" name=\"name\" onChange={handleChange} />\r\n                        </Grid>\r\n                        <Grid item xs={6}>\r\n                            <TextField id=\"outlined-basic\" className={classes.input} label=\"Last Name\" variant=\"outlined\" name=\"lastName\" onChange={handleChange} />\r\n                        </Grid>\r\n                        <Grid item xs={6}>\r\n                            <TextField id=\"outlined-basic\" className={classes.input} label=\"Phone\" variant=\"outlined\" name=\"phoneNumber\" onChange={handleChange} />\r\n                        </Grid>\r\n                        <Grid item xs={6}>\r\n                            <TextField id=\"outlined-basic\" className={classes.input} label=\"E-mail\" variant=\"outlined\" name=\"email\" type=\"email\" onChange={handleChange} />\r\n                        </Grid>\r\n                        <Grid item xs={6}>\r\n                            <Button variant=\"contained\" color=\"primary\" color=\"primary\"\r\n                                className={classes.button}\r\n                                startIcon={<AddIcon />} className={classes.button} onClick={handleSubmit}>\r\n                                Add\r\n                            </Button>\r\n                        </Grid>\r\n                    </Grid>\r\n                </form>\r\n            </Paper>\r\n\r\n            {JSON.stringify(customer)}\r\n        </Grid >\r\n    )\r\n}","C:\\xampp\\htdocs\\symfony_api\\client-app\\src\\components\\navbar\\Navbar.jsx",[],"C:\\xampp\\htdocs\\symfony_api\\client-app\\src\\components\\navbar\\toolbar\\Toolbar.jsx",["102"],"C:\\xampp\\htdocs\\symfony_api\\client-app\\src\\components\\navbar\\drawer\\Drawer.jsx",[],{"ruleId":"103","replacedBy":"104"},{"ruleId":"105","replacedBy":"106"},{"ruleId":"107","severity":1,"message":"108","line":3,"column":7,"nodeType":"109","messageId":"110","endLine":3,"endColumn":17},{"ruleId":"111","severity":1,"message":"112","line":74,"column":55,"nodeType":"113","endLine":74,"endColumn":64},{"ruleId":"111","severity":1,"message":"112","line":73,"column":55,"nodeType":"113","endLine":73,"endColumn":64},{"ruleId":"114","severity":1,"message":"115","line":18,"column":8,"nodeType":"116","endLine":18,"endColumn":10,"suggestions":"117"},{"ruleId":"111","severity":1,"message":"112","line":75,"column":56,"nodeType":"113","endLine":75,"endColumn":65},{"ruleId":"111","severity":1,"message":"112","line":59,"column":56,"nodeType":"113","endLine":59,"endColumn":65},{"ruleId":"111","severity":1,"message":"112","line":78,"column":55,"nodeType":"113","endLine":78,"endColumn":64},{"ruleId":"111","severity":1,"message":"112","line":119,"column":81,"nodeType":"113","endLine":119,"endColumn":96},{"ruleId":"111","severity":1,"message":"112","line":121,"column":65,"nodeType":"113","endLine":121,"endColumn":91},{"ruleId":"111","severity":1,"message":"112","line":73,"column":55,"nodeType":"113","endLine":73,"endColumn":64},{"ruleId":"107","severity":1,"message":"118","line":1,"column":27,"nodeType":"109","messageId":"110","endLine":1,"endColumn":36},{"ruleId":"111","severity":1,"message":"112","line":56,"column":55,"nodeType":"113","endLine":56,"endColumn":64},{"ruleId":"111","severity":1,"message":"112","line":79,"column":73,"nodeType":"113","endLine":79,"endColumn":88},{"ruleId":"111","severity":1,"message":"112","line":81,"column":57,"nodeType":"113","endLine":81,"endColumn":83},{"ruleId":"107","severity":1,"message":"119","line":2,"column":16,"nodeType":"109","messageId":"110","endLine":2,"endColumn":26},"no-native-reassign",["120"],"no-negated-in-lhs",["121"],"no-unused-vars","'categories' is assigned a value but never used.","Identifier","unusedVar","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getCategory'. Either include it or remove the dependency array.","ArrayExpression",["122"],"'useEffect' is defined but never used.","'makeStyles' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"123","fix":"124"},"Update the dependencies array to be: [getCategory]",{"range":"125","text":"126"},[659,661],"[getCategory]"]